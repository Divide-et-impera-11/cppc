ALPHA_CHARACTER
	'A'
	'B'
	'C'
	'D'
	'E'
	'F'
	'G'
	'H'
	'I'
	'J'
	'K'
	'L'
	'M'
	'N'
	'O'
	'P'
	'Q'
	'R'
	'S'
	'T'
	'U'
	'V'
	'W'
	'X'
	'Y'
	'Z'

DIGIT
	'0'
	'1'
	'2'
	'3'
	'4'
	'5'
	'6'
	'7'
	'8'
	'9'

NEWLINE
	'\n'

DQUOTE
	'"'

SQUOTE
	'\''

BACKSLASH
	'\\'

GREATER_THAN
	'>'

ANY_CHARACTER
	.

ANY_CHARACTER_EXCEPT_NEWLINE
	ANY_CHARACTER ~ NEWLINE

ANY_CHARACTER_EXCEPT_NEWLINE_DQOUTE
	ANY_CHARACTER_EXCEPT_NEWLINE ~ DQUOTE

ANY_CHARACTER_EXCEPT_NEWLINE_DQOUTE_BACKSLASH
	ANY_CHARACTER_EXCEPT_NEWLINE_DQOUTE ~ BACKSLASH

ANY_CHARACTER_EXCEPT_NEWLINE_SQOUTE
	ANY_CHARACTER_EXCEPT_NEWLINE ~ SQUOTE

ANY_CHARACTER_EXCEPT_NEWLINE_SQOUTE_BACKSLASH
	ANY_CHARACTER_EXCEPT_NEWLINE_SQOUTE ~ BACKSLASH

ANY_CHARACTER_EXCEPT_NEWLINE_GLEATERTHAN
	ANY_CHARACTER_EXCEPT_NEWLINE ~ GREATER_THAN

abstract_declarator
	ptr_abstract_declarator
	[ noptr_abstract_declarator ] parameters_and_qualifiers trailing_return_type
	'...'

access_specifier
	'private'
	'protected'
	'public'

additive_expression
	multiplicative_expression
	additive_expression '+' multiplicative_expression
	additive_expression '-' multiplicative_expression

alias_declaration
	'using' identifier '=' type_id ';'

alignment_expression
	constant_expression

alignment_specifier
	'alignas' '(' type_id [ '...' ] ')'
	'alignas' '(' alignment_expression [ '...' ] ')'

and_expression
	equality_expression
	and_expression '&' equality_expression

asm_definition
	'asm' '(' string_literal ')' ';'

assignment_expression
	conditional_expression
	logical_or_expression assignment_operator initializer_clause
	throw_expression

assignment_operator
	'='
	'*='
	'/='
	'%='
	'+='
	'-='
	'>>='
	'<<='
	'&='
	'^='
	'|='

attribute
	attribute_token [ attribute_argument_clause ]

attribute_list
	[ attribute ]
	attribute_list ',' [ attribute ]
	attribute '...'
	attribute_list ',' attribute '...'

attribute_argument_clause
	'(' balanced_token_seq ')'

attribute_declaration
	attribute_specifier_seq ';'

attribute_namespace
	identifier

attribute_scoped_token
	attribute_namespace '::' identifier

attribute_specifier
	'[' '[' attribute_list ']' ']'
	alignment_specifier

attribute_specifier_seq
	attribute_specifier
	attribute_specifier_seq attribute_specifier

attribute_token
	identifier
	attribute_scoped_token

balanced_token
	'(' balanced_token_seq ')'
	'[' balanced_token_seq ']'
	'{' balanced_token_seq '}'
	token_except_balances

balanced_token_seq
	balanced_token
	balanced_token_seq balanced_token

base_clause
	':' base_specifier_list

base_specifier
	[ attribute_specifier_seq ] [ '::' ] base_type_specifier
	[ attribute_specifier_seq ] 'virtual' [ access_specifier ] [ '::' ] base_type_specifier
	[ attribute_specifier_seq ] access_specifier [ 'virtual' ] [ '::' ] base_type_specifier

base_specifier_list
	base_specifier [ '...' ]
	base_specifier_list ',' base_specifier [ '...' ]

base_type_specifier
	class_or_decltype

block_declaration
	simple_declaration
	asm_definition
	namespace_alias_definition
	using_declaration
	using_directive
	static_assert_declaration
	alias_declaration
	opaque_enum_declaration

braced_init_list
	'{' initializer_list [ ',' ] '}'
	'{' '}'

brace_or_equal_initializer
	'=' initializer_clause
	braced_init_list

boolean_literal
	'false'
	'true'

c_char
	ANY_CHARACTER_EXCEPT_NEWLINE_SQUOTE_BACKSLASH
	escape_sequence
	universal_character_name

c_char_sequence
	c_char
	c_char_sequence c_char

cast_expression
	unary_expression
	'(' type_id ')' cast_expression

capture
	identifier
	'&' identifier
	'this'

capture_list
	capture [ '...' ]
	capture_list ',' capture [ '...' ]

capture_default
	'&'
	'='

character_literal
	"'" c_char_sequence "'"
	"u'" c_char_sequence "'"
	"U'" c_char_sequence "'"
	"L'" c_char_sequence "'"

class_head
	class_key [ attribute_specifier_seq ] class_head_name [ class_virt_specifier_seq ] [ base_clause ]
	class_key [ attribute_specifier_seq ] [ base_clause ]

class_head_name
	[ nested_name_specifier ] class_name

class_key
	'class'
	'struct'
	'union'

class_name
	identifier
	simple_templtae_id

class_or_decltype
	[ '::' ] nested_name_specifier class_name
	decltype_specifier

class_or_namespace_name
	class_name
	namespace_name

class_specifier
	class_head '{' [ member_specification ] '}'

class_virt_specifier
	'final'
	'explicit'

class_virt_specifier_seq
	class_virt_specifier
	class_virt_specifier_seq class_virt_specifier

compound_statement
	'{' [ statement_seq ] '}'

condition
	expression
	type_specifier_seq declarator '=' assignment_expression

conditional_expression
	logical_or_expression
	logical_or_expression '?' expression ':' assignment_expression

constant_expression
	conditional_expression

constant_initializer
	'=' constant_expression

control_line
	'#' 'include' pp_tokens new_line
	'#' 'define' identifier replacement_list new_line
	'#' 'define' identifier lparen [ identifier_list ] ')' replacement_list new_line
	'#' 'undef' identifier new_line
	'#' 'line' pp_tokens new_line
	'#' 'error' [ pp_tokens ] new_line
	'#' 'pragma' [ pp_tokens ] new_line
	'#' new_line

conversion_declarator
	ptr_operator [ conversion_declarator ]

conversion_function_id
	'operator' conversion_type_id

conversion_type_id
	type_specifier_seq [ conversion_declarator ]

ctor_initializer
	':' mem_initializer_list

cv_qualifier
	'const'
	'volatile'

cv_qualifier_seq
	cv_qualifier [ cv_qualifier_seq ]

d_char
	ANY_CHARACTER_FOR_RAW_STRING_DELIMITER

d_char_sequence
	d_char
	d_char_sequence d_char

decimal_literal
	nonzero_digit
	decimal_literal digit

decl_specifier
	storage_class_specifier
	type_specifier
	function_specifier
	'friend'
	'typedef'
	'constexpr'

decl_specifier_seq
	decl_specifier [ attribute_specifier_seq ]
	decl_specifier decl_specifier_seq

declaration
	block_declaration
	function_definition
	template_declaration
	explicit_instantiation
	explicit_specialization
	linkage_specification
	namespace_definition
	empty_declaration
	attribute_declaration

declaration_seq
	declaration
	declaration_seq declaration

declaration_statement
	block_declaration

declarator
	ptr_declarator
	noptr_declarator parameters_and_qualifiers trailing_return_type

declarator_id
	[ '...' ] id_expression
	[ '::' ] [ nested_name_specifier ] class_name

decltype_specifier
	'decltype' '(' expression ')'

delete_expression
	[ '::' ] 'delete' cast_expression
	[ '::' ] 'delete' '[' ']' cast_expression

digit
	DIGIT

digit_sequence
	digit
	digit_sequence digit

direct_abstract_declarator
	[ direct_abstract_declarator ] '(' paramerter_declaration_clause ')' [ cv_qualifier_seq ] [ exception_specification ]
	[ direct_abstract_declarator ] '[' [ constant_expression ] ']'
	'(' abstract_declarator ')'

dynamic_exception_specification
	'throw' '(' [ type_id_list ] ')'

elaborated_type_specifier
	class_key [ attribute_specifier_seq ] [ '::' ] [ nested_name_specifier ] identifier
	class_key [ '::' ] nested_name_specifier [ 'template' ] template_id
	'enum' [ '::' ] [ nested_name_specifier ] identifier

elif_group
	'#' 'elif' constant_expression new_line [ group ]

elif_groups
	elif_group
	elif_groups elif_group

else_group
	'#' 'else' new_line [ group ]

empty_declaration
	';'

encoding_prefix
	'u8'
	'u'
	'U'
	'L'

endif_line
	'#' 'endif' new_line

enum_base
	':' type_specifier_seq

enum_head
	enum_key [ attribute_specifier_seq ] [ identifier ] [ enum_base ]
	enum_key [ attribute_specifier_seq ] nested_name_specifier identifier [ enum_base ]

enum_key
	'enum'
	'enum class'
	'enum struct'

enum_name
	identifier

enum_specifier
	enum_head '{' [ enumerator_list ] '}'
	enum_head '{' enumerator_list ',' '}'

enumerator
	identifier

enumerator_definition
	enumerator
	enumerator '=' constant_expression

enumerator_list
	enumerator_definition
	enumerator_list ',' enumerator_definition

equality_expression
	relational_expression
	equality_expression '==' relational_expression
	equality_expression '!=' relational_expression

escape_sequence
	simple_escape_sequence
	octal_escape_sequence
	hexadecimal_escape_sequence

exception_declatation
	[ attribute_specifier_seq ] type_specifier_seq declarator
	[ attribute_specifier_seq ] type_specifier_seq [ abstract_declarator ]
	'...'

exception_specification
	dynamic_exception_specification
	noexcept_specification

exclusive_or_expression
	and_expression
	exclusive_or_expression '^' and_expression

explicit_instantiation
	[ 'extern' ] 'template' declaration

explicit_specialization
	'template' '<' '>' declaration

exponent_part
	'e' [ sign ] digit_sequence
	'E' [ sign ] digit_sequence

expression
	assignment_expression
	expression ',' assignment_expression

expression_list
	assignment_expression
	expression ',' assignment_expression

expression_statement
	[ expression ] ';'

extension_namespace_definition
	[ 'inline' ] 'namespace' original_namespace_name '{' namespace_body '}'

floating_literal
	fractional_constant [ exponent_part ] [ floating_suffix ]
	digit_sequence exponent_part [ floating_suffix ]

floating_suffix
	'f'
	'l'
	'F'
	'L'

for_init_statement
	expression_statement
	simple_declaration

for_range_declaration
	[ attribute_specifier_seq ] type_specifier_seq declarator

for_range_initializer
	expression braced_init_list

fractional_constant
	[ digit_sequence ] '.' digit_sequence
	digit_sequence '.'

function_body
	[ ctor_initializer ] compound_statement
	function_try_block

function_definition
	[ attribute_specifier_seq ] [ decl_specifier_seq ] declarator function_body
	[ attribute_specifier_seq ] [ decl_specifier_seq ] declarator '=' 'default' ';'
	[ attribute_specifier_seq ] [ decl_specifier_seq ] declarator '=' 'delete' ';'

function_specifier
	'inline'
	'virtual'
	'explicit'

function_try_block
	'try' [ ctor_initializer ] compound_statement handler_seq

group
	group_part
	group group_part

group_part
	if_section
	control_line
	text-line
	'#' non_directive

h_char
	ANY_CHARACTER_EXCEPT_NEWLINE_GLEATERTHAN

h_char_sequence
	h_char
	h_char_sequence h_char

handler
	'catch' '(' exception_declatation ')' compound_statement

handler_seq
	handler [ handler_seq ]

header_name
	'<' h_char_sequence '>'
	'"' q_char_sequence '"'

hex_quad
	hexadecimal_digit hexadecimal_digit hexadecimal_digit hexadecimal_digit

hexadecimal_digit
	'0'
	'1'
	'2'
	'3'
	'4'
	'5'
	'6'
	'7'
	'8'
	'9'
	'a'
	'b'
	'c'
	'd'
	'e'
	'f'
	'A'
	'B'
	'C'
	'D'
	'E'
	'F'

hexadecimal_escape_sequence
	'\x' hexadecimal_digit
	hexadecimal_escape_sequence hexadecimal_digit

hexadecimal_literal
	'0x' hexadecimal_digit
	'0X' hexadecimal_digit
	hexadecimal_literal hexadecimal_digit

lambda_capture
	capture_default
	capture_list
	capture_default ',' capture_list

lambda_declarator
	'(' paramerter_declaration_clause ')' [ 'mutable' ] [ exception_specification ] [ attribute_specifier_seq ] [ trailing_return_type ]

lambda_expression
	lambda_introducer [ lambda_declarator ] compound_statement

lambda_introducer
	[ lambda_capture ]

id_expression
	unqualified_id
	qualified_id

identifier
	identifier_nondigit
	identifier identifier_nondigit
	identifier digit

identifier_list
	identifier
	identifier_list ',' identifier

identifier_nondigit
	nodigit
	universal-character-name

if_group
	'#' 'if' constant_expression new_line [ group ]
	'#' 'ifdef' identifier new_line [ group ]
	'#' 'ifndef' identifier new_line [ group ]

if_section
	if_group [ elif_groups ] [ else_group ] endif_line

inclusive_or_expression
	exclusive_or_expression
	inclusive_or_expression '|' exclusive_or_expression

init_declarator
	declarator [ initializer ]

init_declarator_list
	init_declarator
	init_declarator_list ',' init_declarator

initializer
	brace_or_equal_initializer
	'(' expression_list ')'

initializer_clause
	assignment_expression
	braced_init_list

initializer_list
	initializer_clause [ '...' ]
	initializer_list ',' initializer_clause [ '...' ]

integer_literal
	decimal_literal [ integer_suffix ]
	octal_literal [ integer_suffix ]
	hexadecimal_literal [ integer_suffix ]

integer_suffix
	unsigned_suffix [ long_suffix ]
	unsigned_suffix [ long_long_suffix ]
	long_suffix [ unsigned_suffix ]
	long_long_suffix [ unsigned_suffix ]

iteration_statement
	'while' '(' condition ')' statement
	'do' statement 'while' '(' expression ')' ';'
	'for' '(' for_init_statement [ condition ] ';' [ expression ] ')' statement
	'for' '(' for_range_declaration ':' for_range_initializer ')' statement

jump_statement
	'break' ';'
	'continue' ';'
	'return' [ expression ] ';'
	'return' [ braced_init_list ] ';'
	'goto' identifier ';'

keyword
	'alignas'
	'alignof'
	'asm'
	'auto'
	'bool'
	'break'
	'case'
	'catch'
	'char'
	'char16_t'
	'char32_t'
	'class'
	'const'
	'constexpr'
	'const_cast'
	'continue'
	'decltype'
	'default'
	'delete'
	'do'
	'double'
	'dynamic_cast'
	'else'
	'enum'
	'explicit'
	'export'
	'extern'
	'false'
	'float'
	'for'
	'friend'
	'goto'
	'if'
	'inline'
	'int'
	'long'
	'mutable'
	'namespace'
	'new'
	'noexcept'
	'nullptr'
	'operator'
	'private'
	'protected'
	'public'
	'register'
	'reinterpret_cast'
	'return'
	'short'
	'signed'
	'sizeof'
	'static'
	'static_assert'
	'static_cast'
	'struct'
	'switch'
	'template'
	'this'
	'thread_local'
	'throw'
	'true'
	'try'
	'typedef'
	'typeid'
	'typename'
	'union'
	'unsigned'
	'using'
	'virtual'
	'void'
	'volatile'
	'wchar_t'
	'while'	

labeled_statement
	identifier ':' statement
	'case' constant_expression ':' statement
	'default' ':' statement

linkage_specification
	'extern' string_literal '{' [ declaration_seq ] '}'
	'extern' string_literal declaration

literal
	integer_literal
	character_literal
	floating_literal
	string_literal
	boolean_literal
	pointer-literal
	user-defined-literal

literal_operator_id
	'operator' '""' identifier

logical_and_expression
	inclusive_or_expression
	logical_and_expression '&&' inclusive_or_expression

logical_or_expression
	logical_and_expression
	logical_or_expression '||' logical_and_expression

long_suffix
	'l'
	'L'

long_long_suffix
	'll'
	'LL'

lparen
	LEFT_PARENTHESIS_WITHOUT_LEADING_WS

mem_initializer
	mem_initializer_id '(' [ expression_list ] ')'
	mem_initializer_id braced_init_list

mem_initializer_id
	[ '::' ] [ nested_name_specifier ] class_name
	identifier

mem_initializer_list
	mem_initializer [ '...' ]
	mem_initializer ',' mem_initializer_list [ '...' ]

member_declaration
	[ attribute_specifier_seq ] [ decl_specifier_seq ] [ member_declarator_list ] ';'
	function_definition [ ';' ]
	using_declaration
	static_assert_declaration
	template_declaration
	alias_declaration

member_declarator
	declarator [ virt_specifier_seq ] [ pure_specifier ]
	declarator [ virt_specifier_seq ] [ brace_or_equal_initializer ]
	[ identifier ] [ attribute_specifier_seq ] [ virt_specifier_seq ] ':' constant_expression

member_declarator_list
	member_declarator
	member_declarator_list ',' member_declarator

member_specification
	member_declaration [ member_specification ]
	access_specifier ':' [ member_specification ]

multiplicative_expression
	pm_expression
	multiplicative_expression '*' pm_expression
	multiplicative_expression '/' pm_expression
	multiplicative_expression '%' pm_expression

named_namespace_definition
	original_namespace_definition
	extension_namespace_definition

namespace_alias
	identifier

namespace_alias_definition
	'namespace' identifier '=' qualified_namespace_specifier ';'

namespace_body
	[ declaration_seq ]

namespace_definition
	named_namespace_definition
	unnamed_namespace_definition

namespace_name
	original_namespace_name
	namespace_alias

nested_name_specifier
	type_name '::'
	namespace_name '::'
	decltype_specifier '::'
	nested_name_specifier identifier '::'
	nested_name_specifier [ 'template' ] simple_template_id '::'

new_declarator
	ptr_operator [ new_declarator ]
	noptr_new_declarator

new_expression
	[ '::' ] 'new' [ new_placement ] new_type_id [ new_initializer ]
	[ '::' ] 'new' [ new_placement ] '(' type_id ')' [ new_initializer ]

new_initializer
	'(' [ expression_list ] ')'

new_line
	NEWLINE

new_placement
	'(' expression_list ')'
	braced_init_list

new_type_id
	type_specifier_seq [ new_declarator ]

noexcept_expression
	'noexcept' '(' expression ')'

noexcept_specification
	'noexcept' '(' constant_expression ')'
	'noexcept'

non_directive
	pp_tokens new_line

nondigit
	ALPHA_CHARACTER
	'_'

nonzero_digit
	'1'
	'2'
	'3'
	'4'
	'5'
	'6'
	'7'
	'8'
	'9'

noptr_abstract_declarator
	[ noptr_abstract_declarator ] parameters_and_qualifiers
	[ noptr_abstract_declarator ] '[' constant_expression ']' '['attribute_specifier_seq ']'
	'(' ptr_abstract_declarator ')'

noptr_declarator
	declarator_id [ attribute_specifier_seq ]
	noptr_declarator parameters_and_qualifiers
	noptr_declarator '[' [ constant_expression ] ']' [ attribute_specifier_seq ]
	'(' ptr_declarator ')'

noptr_new_declarator
	'[' expression ']' [ attribute_specifier_seq ]
	noptr_new_declarator '[' constant_expression ']' [ attribute_specifier_seq ]

octal_digit
	'0'
	'1'
	'2'
	'3'
	'4'
	'5'
	'6'
	'7'

octal_escape_sequence
	'\' octal_digit
	'\' octal_digit octal_digit
	'\' octal_digit octal_digit octal_digit

octal_literal
	'0'
	octal_literal octal_digit

overloadable_operator
	'new'
	'delete'
	'new' '[' ']'
	'delete' '[' ']'
	'+'
	'-'
	'*'
	'/'
	'%'
	'^'
	'&'
	'|'
	'~'
	'!'
	'='
	'<'
	'>'
	'+='
	'-='
	'*='
	'/='
	'%='
	'^='
	'&='
	'|='
	'<<'
	'>>'
	'>>='
	'<<='
	'=='
	'!='
	'<='
	'>='
	'&&'
	'||'
	'++'
	'--'
	','
	'->*'
	'->'
	'()'
	'[]'

operator_function_id
	'operator' overloadable_operator
	'operator' overloadable_operator '<' template_argument_list '>'


original_namespace_definition
	[ 'inline' ] 'namespace' identifier '{' namespace_body '}'

original_namespace_name
	identifier

parameters_and_qualifiers
	'(' paramerter_declaration_clause ')' [ attribute_specifier_seq ] [ cv_qualifier_seq ] [ ref_qualifier ] [ exception_specification ]

parameter_declaration
	[ attribute_specifier_seq ] decl_specifier_seq declarator
	[ attribute_specifier_seq ] decl_specifier_seq declarator '=' initializer_clause
	[ attribute_specifier_seq ] decl_specifier_seq [ abstract_declarator ]
	[ attribute_specifier_seq ] decl_specifier_seq [ abstract_declarator ] '=' initializer_clause

parameter_declaration_clause
	[ parameter_declaration_list ] [ '...' ]
	parameter_declaration_list ',' '...'

parameter_declaration_list
	parameter_declaration
	parameter_declaration_list ',' parameter_declaration

pm_expression
	cast_expression
	pm_expression '.*' cast_expression
	pm_expression '->*' cast_expression

pointer_literal
	'nullptr'

postfix_expression
	primary_expression
	postfix_expression '[' expression ']'
	postfix_expression '[' braced_init_list ']'
	postfix_expression '(' [ expression_list ] ')'
	simple_type_specifier '(' [ expression_list ] ')'
	typename_specifier '(' [ expression_list ] ')'
	simple_type_specifier braced_init_list
	typename_specifier braced_init_list
	postfix_expression '.' [ 'template' ] id_expression
	postfix_expression '->' [ 'template' ] id_expression
	postfix_expression '.' pseudo_destructor_name
	postfix_expression '->' pseudo_destructor_name
	postfix_expression '++'
	postfix_expression '--'
	'dynamic_cast' '<' type_id '>' '(' expression ')'
	'static_cast' '<' type_id '>' '(' expression ')'
	'reinterpret_cast' '<' type_id '>' '(' expression ')'
	'const_cast' '<' type_id '>' '(' expression ')'
	'typeid' '(' expression ')'
	'typeid' '(' type_id ')'

pp_number
	digit
	'.' digit
	pp_number digit
	pp_number nondigit
	pp_number 'e' sign
	pp_number 'E' sign
	pp_number '.'

pp_tokens
	preprocessing_token
	pp_tokens preprocessing_token

preprocessing_file
	[ group ]

preprocessing_op_or_punc
	'{'
	'}'
	'['
	']'
	'#'
	'##'
	'('
	')'
	'<:'
	':>'
	'<%'
	'%>'
	'%:'
	'%:%:'
	';'
	':'
	'...'
	'new'
	'delete'
	'?'
	'::'
	'.'
	'.*'
	'+'
	'-'
	'*'
	'/'
	'%'
	'^'
	'&'
	'|'
	'~'
	'!'
	'='
	'<'
	'>'
	'+='
	'-='
	'*='
	'/='
	'%='
	'^='
	'&='
	'|='
	'<<'
	'>>'
	'>>='
	'<<='
	'=='
	'!='
	'<='
	'>='
	'&&'
	'||'
	'++'
	'--'
	','
	'->*'
	'->'
	'and'
	'and_eq'
	'bitand'
	'bitor'
	'compl'
	'not'
	'not_eq'
	'or'
	'or_eq'
	'xor'
	'xor_eq'

preprocessing_token
	header_name
	identifier
	pp_number
	character_literal
	user_defined_character_literal
	string_literal
	user_defined_string_literal
	preprocessing_op_or_punc
	ANY_NOT_YET_COVERED_NON_WS_CHARACTER

primary_expression
	literal
	'this'
	'(' expression ')'
	id_expression
	lambda-expression

pseudo_destructor_name
	[ '::' ] [ nested_name_specifier ] type_name '::' '~' type_name
	[ '::' ] nested_name_specifier 'template' template_id '::' '~' type_name
	[ '::' ] [ nested_name_specifier ] '~' type_name
	'~' decltype_specifier

ptr_abstract_declarator
	noptr_abstract_declarator
	ptr_operator [ ptr_abstract_declarator ]

ptr_declarator
	noptr_declarator
	ptr_operator ptr_declarator

ptr_operator
	'*' [ attribute_specifier_seq ] [ cv_qualifier_seq ]
	'&' [ attribute_specifier_seq ]
	'&&' [ attribute_specifier_seq ]
	[ '::' ] nested_name_specifier '*' [ attribute_specifier_seq ] [ cv_qualifier_seq ]

pure_specifier
	'=' '0'

q_char
	ANY_CHARACTER_EXCEPT_NEWLINE_DQUOTE

q_char_sequence
	q_char
	q_char_sequence q_char

qualified_id
	[ '::' ] nested_name_specifier [ 'template' ] unqualified_id
	'::' identifier
	'::' operator_function_id
	'::' literal_operator_id
	'::' template_id

qualified_namespace_specifier
	[ '::' ] [ nested_name_specifier ] namespace_name

r_char
	ANY_CHARACTER_EXCEPT_RAW_STRING_DELIMITER

r_char
	r_char
	r_char_sequence r_char

ref_qualifier
	'&'
	'&&'

relational_expression
	shift_expression
	relational_expression '<' shift_expression
	relational_expression '>' shift_expression
	relational_expression '<=' shift_expression
	relational_expression '>=' shift_expression

replacement_list
	[ pp_tokens ]

s_char
	ANY_CHARACTER_EXCEPT_NEWLINE_DQUOTE_BACKSLASH
	escape_sequence
	universal_character_name

s_char_sequence
	s_char
	s_char_sequence s_char

selection_statement
	'if' '(' condition ')' statement
	'if' '(' condition ')' statement 'else' statement
	'switch' '(' condition ')' statement

shift_expression
	additive_expression
	shift_expression '<<' additive_expression
	shift_expression '>>' additive_expression

sign
	'+'
	'-'

simple_declaration
	[ decl_specifier_seq ] [ init_declarator_list ] ';'
simple_escape_sequence
	"\'"
	'\"'
	'\?'
	'\\'
	'\a'
	'\b'
	'\f'
	'\n'
	'\r'
	'\t'
	'\v'

simple_template_id
	template_name '<' [ template_argument_list ] '>'

simple_type_specifier
	[ '::' ] [ nested_name_specifier ] type_name
	[ '::' ] nested_name_specifier 'template' template_id
	'char'
	'char16_t'
	'char32_t'
	'wchar_t'
	'bool'
	'short'
	'int'
	'long'
	'signed'
	'unsigned'
	'float'
	'double'
	'void'
	'auto'
	decltype_specifier

statement
	labeled_statement
	[ attribute_specifier_seq ] expression_statement
	[ attribute_specifier_seq ] compound_statement
	[ attribute_specifier_seq ] selection_statement
	[ attribute_specifier_seq ] iteration_statement
	[ attribute_specifier_seq ] jump_statement
	declaration_statement
	[ attribute_specifier_seq ] try_block

statement_seq
	statement
	statement_seq statement

static_assert_declaration
	'static_assert' '(' constant_expression ',' string_literal ')'

storage_class_specifier
	'register'
	'static'
	'thread_local'
	'extern'
	'mutable'

string_literal
	[ encoding-prefix ] '"' [ s_char_sequence ] '"'
	[ encoding-prefix ] 'R"' [ raw-string ] '"'

syntax
	cpp_syntax_translation_unit
	preprocessor_syntax_preprocessing_file

template_argument
	constant_expression
	type_id
	id_expression

template_argument_list
	template_argument [ '...' ]
	template_argument_list ',' template_argument [ '...' ]

template_declaration
	'template' '<' template_parameter_list '>' declaration

template_id
	simple_template_id
	operator_function_id '<' [ template_argument_list ] '>'
	literal_operator_id '<' [ template_argument_list ] '>'

template_name
	identifier

template_parameter
	type_parameter
	parameter_declaration

template_parameter_list
	template_parameter
	template_parameter_list ',' template_parameter

text_line
	[ pp_tokens ] new_line

throw_expression
	'throw' [ assignment_expression ]

token
	identifier
	keyword
	literal
	operator_token
	punctuator

token_except_balances
	token

trailing_type_specifier
	simple_type_specifier
	elaborated_type_specifier
	typename_specifier
	cv_qualifier

trailing_type_specifier_seq
	trailing_type_specifier [ attribute_specifier_seq ]
	trailing_type_specifier trailing_type_specifier_seq

trailing_return_type
	'->' trailing_type_specifier_seq [ abstract_declarator ]

translation_unit
	[ declaration_seq ]

try_block
	'try' compound_statement handler_seq

type_id
	type_specifier_seq [ abstract_declarator ]

type_id_list
	type_id [ '...' ]
	type_id_list ',' type_id [ '...' ]

type_name
	class_name
	enum_name
	typedef_name
	simple_template_id

type_parameter
	'class' [ '...' ] [ identifier ]
	'class' [ identifier ] '=' type_id
	'typename' [ '...' ] [ identifier ]
	'typename' [ identifier ] '=' type_id
	'template' '<' template_parameter_list '>' 'class' [ '...' ] [ identifier ]
	'template' '<' template_parameter_list '>' 'class' [ identifier ] '=' id_expression

type_specifier
	simple_type_specifier
	class_specifier
	enum_specifier
	elaborated_type_specifier
	cv_qualifier

type_specifier_seq
	type_specifier [ attribute_specifier_seq ]
	type_specifier type_specifier_seq

typedef_name
	identifier

typename_specifier
	'typename' [ '::' ] nested_name_specifier identifier
	'typename' [ '::' ] nested_name_specifier [ 'template' ] simple_template_id

unary_expression
	postfix_expression
	'++' cast_expression
	'--' cast_expression
	unary_operator cast_expression
	'sizeof' unary_expression
	'sizeof' '(' type_id ')'
	'sizeof' '...' '(' identifier ')'
	'alignof' '(' type_id ')'
	noexcept_expression
	new_expression
	delete_expression

unary_operator
	'*'
	'&'
	'+'
	'-'
	'!'
	'~'

universal_character_name
	'\u' hex_quad
	'\U' hex_quad hex_quad

unnamed_namespace_definition
	'namespace' '{' namespace_body '}'

unqualified_id
	identifier
	operator_function_id
	conversion_function_id
	literal_operator_id
	'~' class_name
	'~' decltype_specifier
	template_id

user_defined_literal
	user_defined_integer_literal
	user_defined_floating_literal
	user_defined_string_literal
	user_defined_character_literal

user_defined_integer_literal
	decimal_literal ud_suffix
	octal_literal ud_suffix
	hexadecimal_literal ud_suffix

user_defined_floating_literal
	fractional_constant [ exponent_part ] ud_suffix
	digit_sequence exponent_part ud_suffix

user_defined_string_literal
	string_literal ud_suffix

user_defined_character_literal
	character_literal ud_suffix

ud_suffix
	identifier

unsigned_suffix
	'u'
	'U'

using_declaration
	'using' [ 'typename' ] [ '::' ] nested_name_specifier unqualified_id ';'
	'using' '::' unqualified_id ';'

using_directive
	'using' 'namespace' [ '::' ] [ nested_name_specifier ] namespace_name ';'

virt_specifier
	'override'
	'final'
	'new'

virt_specifier_seq
	virt_specifier
	virt_specifier_seq virt_specifier
